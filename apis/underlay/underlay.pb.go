// Code generated by protoc-gen-go. DO NOT EDIT.
// source: underlay.proto

/*
Package underlay is a generated protocol buffer package.

It is generated from these files:
	underlay.proto

It has these top-level messages:
	Target
	NodeRef
	PolicyRule
	DiscoverRequest
	DiscoverResponse
	Offer
	AllocateRequest
	AllocateResponse
	ReleaseRequest
	MitigateRequest
	MitigateResponse
*/
package underlay

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Target struct {
	Cluster    string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Namespace  string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	ApiVersion string `protobuf:"bytes,3,opt,name=apiVersion" json:"apiVersion,omitempty"`
	Kind       string `protobuf:"bytes,4,opt,name=kind" json:"kind,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (m *Target) Reset()                    { *m = Target{} }
func (m *Target) String() string            { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()               {}
func (*Target) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Target) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *Target) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Target) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *Target) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Target) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NodeRef struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *NodeRef) Reset()                    { *m = NodeRef{} }
func (m *NodeRef) String() string            { return proto.CompactTextString(m) }
func (*NodeRef) ProtoMessage()               {}
func (*NodeRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeRef) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *NodeRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PolicyRule struct {
}

func (m *PolicyRule) Reset()                    { *m = PolicyRule{} }
func (m *PolicyRule) String() string            { return proto.CompactTextString(m) }
func (*PolicyRule) ProtoMessage()               {}
func (*PolicyRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DiscoverRequest struct {
	Rules         []*PolicyRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
	PeerNodes     []string      `protobuf:"bytes,2,rep,name=peerNodes" json:"peerNodes,omitempty"`
	EligibleNodes []string      `protobuf:"bytes,3,rep,name=eligibleNodes" json:"eligibleNodes,omitempty"`
}

func (m *DiscoverRequest) Reset()                    { *m = DiscoverRequest{} }
func (m *DiscoverRequest) String() string            { return proto.CompactTextString(m) }
func (*DiscoverRequest) ProtoMessage()               {}
func (*DiscoverRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DiscoverRequest) GetRules() []*PolicyRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *DiscoverRequest) GetPeerNodes() []string {
	if m != nil {
		return m.PeerNodes
	}
	return nil
}

func (m *DiscoverRequest) GetEligibleNodes() []string {
	if m != nil {
		return m.EligibleNodes
	}
	return nil
}

type DiscoverResponse struct {
	Offers []*Offer `protobuf:"bytes,1,rep,name=offers" json:"offers,omitempty"`
}

func (m *DiscoverResponse) Reset()                    { *m = DiscoverResponse{} }
func (m *DiscoverResponse) String() string            { return proto.CompactTextString(m) }
func (*DiscoverResponse) ProtoMessage()               {}
func (*DiscoverResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DiscoverResponse) GetOffers() []*Offer {
	if m != nil {
		return m.Offers
	}
	return nil
}

type Offer struct {
	Id      string                      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Node    *NodeRef                    `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Cost    int64                       `protobuf:"varint,3,opt,name=cost" json:"cost,omitempty"`
	Expires *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=expires" json:"expires,omitempty"`
}

func (m *Offer) Reset()                    { *m = Offer{} }
func (m *Offer) String() string            { return proto.CompactTextString(m) }
func (*Offer) ProtoMessage()               {}
func (*Offer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Offer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Offer) GetNode() *NodeRef {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Offer) GetCost() int64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *Offer) GetExpires() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Expires
	}
	return nil
}

type AllocateRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *AllocateRequest) Reset()                    { *m = AllocateRequest{} }
func (m *AllocateRequest) String() string            { return proto.CompactTextString(m) }
func (*AllocateRequest) ProtoMessage()               {}
func (*AllocateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AllocateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AllocateResponse struct {
}

func (m *AllocateResponse) Reset()                    { *m = AllocateResponse{} }
func (m *AllocateResponse) String() string            { return proto.CompactTextString(m) }
func (*AllocateResponse) ProtoMessage()               {}
func (*AllocateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ReleaseRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReleaseRequest) Reset()                    { *m = ReleaseRequest{} }
func (m *ReleaseRequest) String() string            { return proto.CompactTextString(m) }
func (*ReleaseRequest) ProtoMessage()               {}
func (*ReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReleaseRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MitigateRequest struct {
	Id    []string      `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
	Src   *NodeRef      `protobuf:"bytes,2,opt,name=src" json:"src,omitempty"`
	Peer  *NodeRef      `protobuf:"bytes,3,opt,name=peer" json:"peer,omitempty"`
	Rules []*PolicyRule `protobuf:"bytes,4,rep,name=rules" json:"rules,omitempty"`
}

func (m *MitigateRequest) Reset()                    { *m = MitigateRequest{} }
func (m *MitigateRequest) String() string            { return proto.CompactTextString(m) }
func (*MitigateRequest) ProtoMessage()               {}
func (*MitigateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MitigateRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MitigateRequest) GetSrc() *NodeRef {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *MitigateRequest) GetPeer() *NodeRef {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MitigateRequest) GetRules() []*PolicyRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type MitigateResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *MitigateResponse) Reset()                    { *m = MitigateResponse{} }
func (m *MitigateResponse) String() string            { return proto.CompactTextString(m) }
func (*MitigateResponse) ProtoMessage()               {}
func (*MitigateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MitigateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Target)(nil), "underlay.Target")
	proto.RegisterType((*NodeRef)(nil), "underlay.NodeRef")
	proto.RegisterType((*PolicyRule)(nil), "underlay.PolicyRule")
	proto.RegisterType((*DiscoverRequest)(nil), "underlay.DiscoverRequest")
	proto.RegisterType((*DiscoverResponse)(nil), "underlay.DiscoverResponse")
	proto.RegisterType((*Offer)(nil), "underlay.Offer")
	proto.RegisterType((*AllocateRequest)(nil), "underlay.AllocateRequest")
	proto.RegisterType((*AllocateResponse)(nil), "underlay.AllocateResponse")
	proto.RegisterType((*ReleaseRequest)(nil), "underlay.ReleaseRequest")
	proto.RegisterType((*MitigateRequest)(nil), "underlay.MitigateRequest")
	proto.RegisterType((*MitigateResponse)(nil), "underlay.MitigateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UnderlayController service

type UnderlayControllerClient interface {
	Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error)
	Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*AllocateResponse, error)
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Mitigate(ctx context.Context, in *MitigateRequest, opts ...grpc.CallOption) (*MitigateResponse, error)
}

type underlayControllerClient struct {
	cc *grpc.ClientConn
}

func NewUnderlayControllerClient(cc *grpc.ClientConn) UnderlayControllerClient {
	return &underlayControllerClient{cc}
}

func (c *underlayControllerClient) Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error) {
	out := new(DiscoverResponse)
	err := grpc.Invoke(ctx, "/underlay.UnderlayController/Discover", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *underlayControllerClient) Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*AllocateResponse, error) {
	out := new(AllocateResponse)
	err := grpc.Invoke(ctx, "/underlay.UnderlayController/Allocate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *underlayControllerClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/underlay.UnderlayController/Release", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *underlayControllerClient) Mitigate(ctx context.Context, in *MitigateRequest, opts ...grpc.CallOption) (*MitigateResponse, error) {
	out := new(MitigateResponse)
	err := grpc.Invoke(ctx, "/underlay.UnderlayController/Mitigate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UnderlayController service

type UnderlayControllerServer interface {
	Discover(context.Context, *DiscoverRequest) (*DiscoverResponse, error)
	Allocate(context.Context, *AllocateRequest) (*AllocateResponse, error)
	Release(context.Context, *ReleaseRequest) (*google_protobuf.Empty, error)
	Mitigate(context.Context, *MitigateRequest) (*MitigateResponse, error)
}

func RegisterUnderlayControllerServer(s *grpc.Server, srv UnderlayControllerServer) {
	s.RegisterService(&_UnderlayController_serviceDesc, srv)
}

func _UnderlayController_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnderlayControllerServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/underlay.UnderlayController/Discover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnderlayControllerServer).Discover(ctx, req.(*DiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnderlayController_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnderlayControllerServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/underlay.UnderlayController/Allocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnderlayControllerServer).Allocate(ctx, req.(*AllocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnderlayController_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnderlayControllerServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/underlay.UnderlayController/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnderlayControllerServer).Release(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnderlayController_Mitigate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitigateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnderlayControllerServer).Mitigate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/underlay.UnderlayController/Mitigate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnderlayControllerServer).Mitigate(ctx, req.(*MitigateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UnderlayController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "underlay.UnderlayController",
	HandlerType: (*UnderlayControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Discover",
			Handler:    _UnderlayController_Discover_Handler,
		},
		{
			MethodName: "Allocate",
			Handler:    _UnderlayController_Allocate_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _UnderlayController_Release_Handler,
		},
		{
			MethodName: "Mitigate",
			Handler:    _UnderlayController_Mitigate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "underlay.proto",
}

func init() { proto.RegisterFile("underlay.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0xed, 0xb4, 0x49, 0x27, 0x34, 0x09, 0x2b, 0x84, 0x8c, 0x41, 0x25, 0x18, 0x10, 0x15,
	0x07, 0x47, 0x0a, 0x48, 0x1c, 0x7a, 0x0a, 0x1f, 0x47, 0x3e, 0x64, 0x15, 0x0e, 0xdc, 0x1c, 0x7b,
	0x62, 0x56, 0xdd, 0x78, 0xcd, 0xee, 0x1a, 0xd1, 0x23, 0x37, 0xfe, 0x02, 0xfc, 0x5a, 0xb4, 0x6b,
	0x6f, 0xec, 0x9a, 0x14, 0x6e, 0xde, 0x79, 0xf3, 0xf1, 0xe6, 0xbd, 0x91, 0x61, 0x52, 0x15, 0x19,
	0x0a, 0x96, 0x5c, 0x46, 0xa5, 0xe0, 0x8a, 0x93, 0x91, 0x7d, 0x07, 0x77, 0x73, 0xce, 0x73, 0x86,
	0x0b, 0x13, 0x5f, 0x57, 0x9b, 0x05, 0x6e, 0x4b, 0xd5, 0xa4, 0x05, 0xf7, 0xfb, 0xa0, 0xa2, 0x5b,
	0x94, 0x2a, 0xd9, 0x96, 0x75, 0x42, 0xf8, 0xd3, 0x81, 0xc3, 0xf3, 0x44, 0xe4, 0xa8, 0x88, 0x0f,
	0xc3, 0x94, 0x55, 0x52, 0xa1, 0xf0, 0x9d, 0xb9, 0x73, 0x7a, 0x14, 0xdb, 0x27, 0xb9, 0x07, 0x47,
	0x45, 0xb2, 0x45, 0x59, 0x26, 0x29, 0xfa, 0xae, 0xc1, 0xda, 0x00, 0x39, 0x01, 0x48, 0x4a, 0xfa,
	0x09, 0x85, 0xa4, 0xbc, 0xf0, 0x3d, 0x03, 0x77, 0x22, 0x84, 0xc0, 0xe0, 0x82, 0x16, 0x99, 0x3f,
	0x30, 0x88, 0xf9, 0xd6, 0x31, 0xdd, 0xc0, 0x3f, 0xa8, 0x63, 0xfa, 0x3b, 0x7c, 0x01, 0xc3, 0x77,
	0x3c, 0xc3, 0x18, 0x37, 0xff, 0xa0, 0x62, 0x0b, 0xdd, 0x4e, 0xe1, 0x0d, 0x80, 0x0f, 0x9c, 0xd1,
	0xf4, 0x32, 0xae, 0x18, 0x86, 0x3f, 0x1c, 0x98, 0xbe, 0xa6, 0x32, 0xe5, 0xdf, 0x50, 0xc4, 0xf8,
	0xb5, 0x42, 0xa9, 0xc8, 0x53, 0x38, 0x10, 0x15, 0x43, 0xe9, 0x3b, 0x73, 0xef, 0x74, 0xbc, 0xbc,
	0x15, 0xed, 0xd4, 0x6c, 0x0b, 0xe3, 0x3a, 0x45, 0x2f, 0x5b, 0x22, 0x0a, 0x4d, 0x45, 0xfa, 0xee,
	0xdc, 0xd3, 0xcb, 0xee, 0x02, 0xe4, 0x11, 0x1c, 0x23, 0xa3, 0x39, 0x5d, 0x33, 0xac, 0x33, 0x3c,
	0x93, 0x71, 0x35, 0x18, 0x9e, 0xc1, 0xac, 0xa5, 0x20, 0x4b, 0x5e, 0x48, 0x24, 0x4f, 0xe0, 0x90,
	0x6f, 0x36, 0x28, 0x2c, 0x89, 0x69, 0x4b, 0xe2, 0xbd, 0x8e, 0xc7, 0x0d, 0xac, 0x2d, 0x39, 0x30,
	0x11, 0x32, 0x01, 0x97, 0x66, 0x8d, 0x02, 0x2e, 0xcd, 0xc8, 0x63, 0x18, 0x14, 0x3c, 0xab, 0x97,
	0x1f, 0x2f, 0x6f, 0xb6, 0x0d, 0x1a, 0xdd, 0x62, 0x03, 0x6b, 0x8d, 0x52, 0x2e, 0x95, 0xb1, 0xc2,
	0x8b, 0xcd, 0x37, 0x79, 0x0e, 0x43, 0xfc, 0x5e, 0x52, 0x81, 0xd2, 0xf8, 0x30, 0x5e, 0x06, 0x51,
	0x7d, 0x1a, 0x91, 0x3d, 0x8d, 0xe8, 0xdc, 0x9e, 0x46, 0x6c, 0x53, 0xc3, 0x07, 0x30, 0x5d, 0x31,
	0xc6, 0xd3, 0x44, 0xa1, 0x95, 0xb2, 0xc7, 0x29, 0x24, 0x30, 0x6b, 0x53, 0xea, 0x55, 0xc3, 0x39,
	0x4c, 0x62, 0x64, 0x98, 0xc8, 0x6b, 0xab, 0x7e, 0x39, 0x30, 0x7d, 0x4b, 0x15, 0xcd, 0xf7, 0x74,
	0xf6, 0x9a, 0x6d, 0x1f, 0x82, 0x27, 0x45, 0x7a, 0xfd, 0xb2, 0x1a, 0xd5, 0x92, 0x68, 0x73, 0xcc,
	0xae, 0xfb, 0x25, 0xd1, 0x70, 0x7b, 0x00, 0x83, 0xff, 0x1e, 0x40, 0x18, 0xc2, 0xac, 0xa5, 0xd6,
	0x98, 0xd7, 0xe3, 0xbf, 0xfc, 0xed, 0x02, 0xf9, 0xd8, 0xb4, 0x78, 0xc5, 0x0b, 0x25, 0x38, 0x63,
	0x28, 0xc8, 0x0a, 0x46, 0xd6, 0x77, 0x72, 0xa7, 0x9d, 0xd1, 0x3b, 0xc7, 0x20, 0xd8, 0x07, 0x35,
	0x93, 0x56, 0x30, 0xb2, 0x7a, 0x76, 0x5b, 0xf4, 0x6c, 0xe8, 0xb6, 0xe8, 0xcb, 0x4f, 0xce, 0x60,
	0xd8, 0xc8, 0x4f, 0xfc, 0x36, 0xed, 0xaa, 0x23, 0xc1, 0xed, 0xbf, 0xfc, 0x7f, 0xa3, 0xff, 0x1b,
	0x7a, 0xbe, 0xdd, 0xbe, 0x3b, 0xbf, 0x67, 0x56, 0x77, 0x7e, 0x5f, 0xac, 0x97, 0x0b, 0x38, 0xc9,
	0xa9, 0xfa, 0x52, 0xad, 0xa3, 0x94, 0x6f, 0x17, 0xaa, 0x12, 0xc5, 0xba, 0x4a, 0x2f, 0x18, 0x2e,
	0x6c, 0xc9, 0xe7, 0xe3, 0xa4, 0xa4, 0x72, 0xf7, 0x5c, 0x1f, 0x1a, 0x0e, 0xcf, 0xfe, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x10, 0x5f, 0x8e, 0x19, 0xe5, 0x04, 0x00, 0x00,
}
