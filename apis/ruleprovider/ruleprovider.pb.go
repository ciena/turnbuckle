// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ruleprovider.proto

/*
Package ruleprovider is a generated protocol buffer package.

It is generated from these files:
	ruleprovider.proto

It has these top-level messages:
	PolicyRule
	Target
	EvaluateRequest
	EvaluateResponse
	NodeCost
	EndpointCostResponse
	EndpointCostRequest
*/
package ruleprovider

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EvaluateResponse_ComplianceState int32

const (
	EvaluateResponse_Pending   EvaluateResponse_ComplianceState = 0
	EvaluateResponse_Compliant EvaluateResponse_ComplianceState = 1
	EvaluateResponse_Limit     EvaluateResponse_ComplianceState = 2
	EvaluateResponse_Violation EvaluateResponse_ComplianceState = 3
	EvaluateResponse_Error     EvaluateResponse_ComplianceState = 4
)

var EvaluateResponse_ComplianceState_name = map[int32]string{
	0: "Pending",
	1: "Compliant",
	2: "Limit",
	3: "Violation",
	4: "Error",
}
var EvaluateResponse_ComplianceState_value = map[string]int32{
	"Pending":   0,
	"Compliant": 1,
	"Limit":     2,
	"Violation": 3,
	"Error":     4,
}

func (x EvaluateResponse_ComplianceState) String() string {
	return proto.EnumName(EvaluateResponse_ComplianceState_name, int32(x))
}
func (EvaluateResponse_ComplianceState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

// Defines a single policy rule
type PolicyRule struct {
	// the type which this rule applies
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// the condition for the policy type against the value
	Request string `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	// the value to which to apply the condition
	Limit string `protobuf:"bytes,3,opt,name=limit" json:"limit,omitempty"`
}

func (m *PolicyRule) Reset()                    { *m = PolicyRule{} }
func (m *PolicyRule) String() string            { return proto.CompactTextString(m) }
func (*PolicyRule) ProtoMessage()               {}
func (*PolicyRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PolicyRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PolicyRule) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *PolicyRule) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

type Target struct {
	Cluster    string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Namespace  string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	ApiVersion string `protobuf:"bytes,3,opt,name=apiVersion" json:"apiVersion,omitempty"`
	Kind       string `protobuf:"bytes,4,opt,name=kind" json:"kind,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (m *Target) Reset()                    { *m = Target{} }
func (m *Target) String() string            { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()               {}
func (*Target) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Target) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *Target) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Target) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *Target) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Target) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EvaluateRequest struct {
	Targets map[string]*Target `protobuf:"bytes,1,rep,name=targets" json:"targets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Rule    *PolicyRule        `protobuf:"bytes,2,opt,name=rule" json:"rule,omitempty"`
}

func (m *EvaluateRequest) Reset()                    { *m = EvaluateRequest{} }
func (m *EvaluateRequest) String() string            { return proto.CompactTextString(m) }
func (*EvaluateRequest) ProtoMessage()               {}
func (*EvaluateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EvaluateRequest) GetTargets() map[string]*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *EvaluateRequest) GetRule() *PolicyRule {
	if m != nil {
		return m.Rule
	}
	return nil
}

type EvaluateResponse struct {
	Compliance EvaluateResponse_ComplianceState `protobuf:"varint,1,opt,name=compliance,enum=ruleprovider.EvaluateResponse_ComplianceState" json:"compliance,omitempty"`
	Reason     string                           `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (m *EvaluateResponse) Reset()                    { *m = EvaluateResponse{} }
func (m *EvaluateResponse) String() string            { return proto.CompactTextString(m) }
func (*EvaluateResponse) ProtoMessage()               {}
func (*EvaluateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EvaluateResponse) GetCompliance() EvaluateResponse_ComplianceState {
	if m != nil {
		return m.Compliance
	}
	return EvaluateResponse_Pending
}

func (m *EvaluateResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type NodeCost struct {
	Node string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Cost int64  `protobuf:"varint,2,opt,name=cost" json:"cost,omitempty"`
}

func (m *NodeCost) Reset()                    { *m = NodeCost{} }
func (m *NodeCost) String() string            { return proto.CompactTextString(m) }
func (*NodeCost) ProtoMessage()               {}
func (*NodeCost) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NodeCost) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *NodeCost) GetCost() int64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

type EndpointCostResponse struct {
	NodeAndCost []*NodeCost `protobuf:"bytes,1,rep,name=nodeAndCost" json:"nodeAndCost,omitempty"`
}

func (m *EndpointCostResponse) Reset()                    { *m = EndpointCostResponse{} }
func (m *EndpointCostResponse) String() string            { return proto.CompactTextString(m) }
func (*EndpointCostResponse) ProtoMessage()               {}
func (*EndpointCostResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EndpointCostResponse) GetNodeAndCost() []*NodeCost {
	if m != nil {
		return m.NodeAndCost
	}
	return nil
}

type EndpointCostRequest struct {
	Source        *Target     `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Rule          *PolicyRule `protobuf:"bytes,2,opt,name=rule" json:"rule,omitempty"`
	PeerNodes     []string    `protobuf:"bytes,3,rep,name=peerNodes" json:"peerNodes,omitempty"`
	EligibleNodes []string    `protobuf:"bytes,4,rep,name=eligibleNodes" json:"eligibleNodes,omitempty"`
}

func (m *EndpointCostRequest) Reset()                    { *m = EndpointCostRequest{} }
func (m *EndpointCostRequest) String() string            { return proto.CompactTextString(m) }
func (*EndpointCostRequest) ProtoMessage()               {}
func (*EndpointCostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EndpointCostRequest) GetSource() *Target {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *EndpointCostRequest) GetRule() *PolicyRule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *EndpointCostRequest) GetPeerNodes() []string {
	if m != nil {
		return m.PeerNodes
	}
	return nil
}

func (m *EndpointCostRequest) GetEligibleNodes() []string {
	if m != nil {
		return m.EligibleNodes
	}
	return nil
}

func init() {
	proto.RegisterType((*PolicyRule)(nil), "ruleprovider.PolicyRule")
	proto.RegisterType((*Target)(nil), "ruleprovider.Target")
	proto.RegisterType((*EvaluateRequest)(nil), "ruleprovider.EvaluateRequest")
	proto.RegisterType((*EvaluateResponse)(nil), "ruleprovider.EvaluateResponse")
	proto.RegisterType((*NodeCost)(nil), "ruleprovider.NodeCost")
	proto.RegisterType((*EndpointCostResponse)(nil), "ruleprovider.EndpointCostResponse")
	proto.RegisterType((*EndpointCostRequest)(nil), "ruleprovider.EndpointCostRequest")
	proto.RegisterEnum("ruleprovider.EvaluateResponse_ComplianceState", EvaluateResponse_ComplianceState_name, EvaluateResponse_ComplianceState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RuleProvider service

type RuleProviderClient interface {
	Evaluate(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*EvaluateResponse, error)
	EndpointCost(ctx context.Context, in *EndpointCostRequest, opts ...grpc.CallOption) (*EndpointCostResponse, error)
}

type ruleProviderClient struct {
	cc *grpc.ClientConn
}

func NewRuleProviderClient(cc *grpc.ClientConn) RuleProviderClient {
	return &ruleProviderClient{cc}
}

func (c *ruleProviderClient) Evaluate(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*EvaluateResponse, error) {
	out := new(EvaluateResponse)
	err := grpc.Invoke(ctx, "/ruleprovider.RuleProvider/Evaluate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleProviderClient) EndpointCost(ctx context.Context, in *EndpointCostRequest, opts ...grpc.CallOption) (*EndpointCostResponse, error) {
	out := new(EndpointCostResponse)
	err := grpc.Invoke(ctx, "/ruleprovider.RuleProvider/EndpointCost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RuleProvider service

type RuleProviderServer interface {
	Evaluate(context.Context, *EvaluateRequest) (*EvaluateResponse, error)
	EndpointCost(context.Context, *EndpointCostRequest) (*EndpointCostResponse, error)
}

func RegisterRuleProviderServer(s *grpc.Server, srv RuleProviderServer) {
	s.RegisterService(&_RuleProvider_serviceDesc, srv)
}

func _RuleProvider_Evaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleProviderServer).Evaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ruleprovider.RuleProvider/Evaluate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleProviderServer).Evaluate(ctx, req.(*EvaluateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleProvider_EndpointCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleProviderServer).EndpointCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ruleprovider.RuleProvider/EndpointCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleProviderServer).EndpointCost(ctx, req.(*EndpointCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RuleProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ruleprovider.RuleProvider",
	HandlerType: (*RuleProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Evaluate",
			Handler:    _RuleProvider_Evaluate_Handler,
		},
		{
			MethodName: "EndpointCost",
			Handler:    _RuleProvider_EndpointCost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ruleprovider.proto",
}

func init() { proto.RegisterFile("ruleprovider.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xc5, 0x75, 0x1e, 0xcd, 0x4d, 0x4a, 0xcd, 0x6d, 0x54, 0x59, 0x11, 0x54, 0xc1, 0x62, 0x51,
	0x55, 0x55, 0x90, 0xc2, 0xa6, 0x62, 0x07, 0x25, 0x0b, 0x24, 0x54, 0x59, 0x06, 0xba, 0x60, 0xe7,
	0xda, 0xa3, 0x68, 0x54, 0x67, 0xc6, 0xcc, 0x8c, 0x2b, 0xe5, 0x0f, 0xf8, 0x1c, 0x36, 0xfc, 0x06,
	0x5b, 0x7e, 0x07, 0xcd, 0xc3, 0x89, 0x1d, 0xd4, 0x48, 0xec, 0x66, 0xce, 0x9c, 0x73, 0xe6, 0xf8,
	0xde, 0x3b, 0x06, 0x14, 0x55, 0x41, 0x4a, 0xc1, 0x1f, 0x68, 0x4e, 0xc4, 0xac, 0x14, 0x5c, 0x71,
	0x1c, 0x35, 0xb1, 0x28, 0x06, 0x88, 0x79, 0x41, 0xb3, 0x75, 0x52, 0x15, 0x04, 0x11, 0x3a, 0x2c,
	0x5d, 0x91, 0xd0, 0x9b, 0x7a, 0xe7, 0x83, 0xc4, 0xac, 0x31, 0x84, 0xbe, 0x20, 0xdf, 0x2b, 0x22,
	0x55, 0x78, 0x60, 0xe0, 0x7a, 0x8b, 0x63, 0xe8, 0x16, 0x74, 0x45, 0x55, 0xe8, 0x1b, 0xdc, 0x6e,
	0xa2, 0x1f, 0x1e, 0xf4, 0xbe, 0xa4, 0x62, 0x49, 0x94, 0x96, 0x66, 0x45, 0x25, 0x15, 0x11, 0xce,
	0xb1, 0xde, 0xe2, 0x73, 0x18, 0x68, 0x73, 0x59, 0xa6, 0x19, 0x71, 0xb6, 0x5b, 0x00, 0xcf, 0x00,
	0xd2, 0x92, 0xde, 0x12, 0x21, 0x29, 0x67, 0xce, 0xbd, 0x81, 0xe8, 0x98, 0xf7, 0x94, 0xe5, 0x61,
	0xc7, 0xc6, 0xd4, 0xeb, 0x4d, 0xf4, 0xee, 0x36, 0x7a, 0xf4, 0xc7, 0x83, 0xe3, 0xc5, 0x43, 0x5a,
	0x54, 0xa9, 0x22, 0x89, 0x0b, 0xfd, 0x01, 0xfa, 0xca, 0xa4, 0x93, 0xa1, 0x37, 0xf5, 0xcf, 0x87,
	0xf3, 0x8b, 0x59, 0xab, 0x48, 0x3b, 0xfc, 0x99, 0xfd, 0x14, 0xb9, 0x60, 0x4a, 0xac, 0x93, 0x5a,
	0x8a, 0x97, 0xd0, 0xd1, 0x2a, 0x13, 0x7d, 0x38, 0x0f, 0xdb, 0x16, 0xdb, 0x82, 0x26, 0x86, 0x35,
	0x89, 0x61, 0xd4, 0xb4, 0xc1, 0x00, 0xfc, 0x7b, 0xb2, 0x76, 0x35, 0xd1, 0x4b, 0xbc, 0x80, 0xae,
	0xbe, 0xb7, 0x36, 0x1c, 0xb7, 0x0d, 0xad, 0x38, 0xb1, 0x94, 0xb7, 0x07, 0x57, 0x5e, 0xf4, 0xdb,
	0x83, 0x60, 0x9b, 0x54, 0x96, 0x9c, 0x49, 0x82, 0x37, 0x00, 0x19, 0x5f, 0x95, 0x05, 0x4d, 0x59,
	0x66, 0x7b, 0xf8, 0x74, 0x3e, 0x7b, 0xec, 0xeb, 0xac, 0x66, 0x76, 0xbd, 0x11, 0x7c, 0x56, 0x1a,
	0x6f, 0x38, 0xe0, 0x29, 0xf4, 0x04, 0x49, 0x25, 0x67, 0xae, 0x43, 0x6e, 0x17, 0x25, 0x70, 0xbc,
	0x23, 0xc3, 0x21, 0xf4, 0x63, 0xc2, 0x72, 0xca, 0x96, 0xc1, 0x13, 0x3c, 0x82, 0x41, 0x7d, 0xae,
	0x02, 0x0f, 0x07, 0xd0, 0xfd, 0xa4, 0x27, 0x23, 0x38, 0xd0, 0x27, 0xb7, 0x94, 0x17, 0xa9, 0xa2,
	0x9c, 0x05, 0xbe, 0x3e, 0x59, 0x08, 0xc1, 0x45, 0xd0, 0x89, 0xe6, 0x70, 0x78, 0xc3, 0x73, 0x72,
	0xcd, 0xa5, 0x32, 0xad, 0xe4, 0xf9, 0x76, 0x0a, 0x79, 0x6e, 0x26, 0x33, 0xe3, 0x6e, 0x04, 0xfd,
	0xc4, 0xac, 0xa3, 0x18, 0xc6, 0x0b, 0x96, 0x97, 0x9c, 0x32, 0xa5, 0x75, 0x9b, 0x3a, 0x5c, 0xc1,
	0x50, 0x6b, 0xde, 0xb1, 0x5c, 0xc3, 0xae, 0xcd, 0xa7, 0xed, 0x42, 0xd4, 0x97, 0x25, 0x4d, 0x6a,
	0xf4, 0xcb, 0x83, 0x93, 0xb6, 0xa5, 0x1d, 0x9a, 0x4b, 0xe8, 0x49, 0x5e, 0x09, 0x57, 0xd5, 0xc7,
	0xfa, 0xe3, 0x38, 0xff, 0x37, 0x1c, 0xfa, 0x29, 0x94, 0x84, 0x08, 0x1d, 0x48, 0x86, 0xfe, 0xd4,
	0xd7, 0x4f, 0x61, 0x03, 0xe0, 0x2b, 0x38, 0x22, 0x05, 0x5d, 0xd2, 0xbb, 0x82, 0x58, 0x46, 0xc7,
	0x30, 0xda, 0xe0, 0xfc, 0xa7, 0x07, 0x23, 0x6d, 0x19, 0xbb, 0x5b, 0xf0, 0x23, 0x1c, 0xd6, 0xad,
	0xc6, 0x17, 0x7b, 0x07, 0x7c, 0x72, 0xb6, 0x7f, 0x42, 0xf0, 0x2b, 0x8c, 0x9a, 0x25, 0xc1, 0x97,
	0x3b, 0xfc, 0x7f, 0xcb, 0x35, 0x89, 0xf6, 0x51, 0xac, 0xed, 0xfb, 0x93, 0x6f, 0xcf, 0xd2, 0x92,
	0xca, 0xd7, 0x4d, 0xe6, 0x5d, 0xcf, 0xfc, 0xa2, 0xde, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x78,
	0xb4, 0x39, 0x76, 0xb8, 0x04, 0x00, 0x00,
}
